
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
import math
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont

# iterations and timing
MAX_IT = 256
AVG_IT_REF = MAX_IT / 2
HIGH_IT_THRESH = 85
HIGH_IT_FACTOR = 100
LOW_IT_THRESH = 70
LOW_IT_FACTOR = 35
DEEP_CNT_THRESH = 15
LOW_DEEP_THRESH = 0.06
HIGH_DEEP_THRESH = 0.3
DEEP_ADJUST = 3.2
DURATION = 100

#theta
THETA0 = 5.95
DTHETA_BASE = 2 * math.pi / 2400
THETA_REF = DTHETA_BASE / AVG_IT_REF
THETA_FACTOR_EXP = 0.7

#r
RMIN = 0.678
RMAX = 0.68168
DRDTHETA = 0.1 / math.pi

# canvas 
W = 800
XMIN = -1.4
XMAX = 1.4
YMIN = -1.4
YMAX = 1.4



font = ImageFont.load_default()

def it_factor_final(it_factor, deep_factor):
    if it_factor > HIGH_IT_THRESH:
        ret =  HIGH_IT_FACTOR
    elif it_factor < LOW_IT_THRESH:
        ret = LOW_IT_FACTOR
    else:
        ret = (
            LOW_IT_FACTOR + 
            (HIGH_IT_FACTOR - LOW_IT_FACTOR) * (it_factor - LOW_IT_THRESH) / (HIGH_IT_THRESH - LOW_IT_THRESH)
        )

    if deep_factor > HIGH_DEEP_THRESH:
        adjust = DEEP_ADJUST
    elif deep_factor > LOW_DEEP_THRESH:
        adjust = 1 + (DEEP_ADJUST - 1) * (deep_factor - LOW_DEEP_THRESH) / (HIGH_DEEP_THRESH - LOW_DEEP_THRESH)
    else:
        adjust = 1

    return ret / adjust

def when_exit(z, c):
    i = 0
    while(abs(z) < 2 and i < MAX_IT):
        z = z * z + c
        i += 1
    return i  

def colors_list():
    blues = []
    reds = []
    for i in range(1, 16):
        val = i * 17
        blues.append((0, 0, val))
        reds.append((val, 0, 255-val))
    return blues + reds

def main():
    images = []

    black = (0, 0, 0)
    white = (255, 255, 255)
    theta = THETA0
    r = RMIN
    step_cnt = 1
    last = datetime.now()
    colors = colors_list()
    sign_dr = 1

    print(f"START: r0={r} theta0={theta} DTHETA_BASE={DTHETA_BASE} THETA_REF={THETA_REF}")

    while r >= RMIN and r <= RMAX:
        im = Image.new('RGB', (W, W), black)
        px = im.load()            
        c = complex(r * math.sin(theta), r * math.cos(theta))
        tot_it = 0
        deep_cnt = 0

        for i in range(0, W):
            for j in range(0, W):
                x = XMIN + (i/W) * (XMAX - XMIN)
                y = YMIN + (j/W) * (YMAX - YMIN)
                z = complex(x, y)
                cnt = when_exit(z, c)
                tot_it += cnt
                if cnt == MAX_IT or cnt == 0:
                    color = black
                else:
                    if cnt > DEEP_CNT_THRESH:
                        deep_cnt += 1
                    color = colors[cnt % 30]
                px[i, j] = color

        d = ImageDraw.Draw(im)

        now = datetime.now()
        it_factor = tot_it / (W*W)
        deep_factor = deep_cnt / (W*W)
        it_factor_used = it_factor_final(it_factor, deep_factor)
        # d.multiline_text((10,10), f"{r:.3f} {theta:.3f} {deep_factor:.3f} {it_factor:.3f} {it_factor_used:.3f}", font=font, fill=white)
        d.multiline_text((10,10), f"{r:.3f} {theta:.3f}", font=font, fill=white)
        images.append(im)

        print(now - last, step_cnt, r, theta, c, tot_it, it_factor, it_factor_used)

        dtheta = THETA_REF * it_factor_used
        #print(f"dtheta={dtheta} DRDTHETA={DRDTHETA}")
        theta += dtheta
        dr = sign_dr * DRDTHETA * dtheta
        #print(f"dr={dr}")
        r += dr
        if r > RMAX:
            sign_dr = -sign_dr
        step_cnt += 1
        last = now


    print("END")
    print(f"THETA={theta}")
    images[0].save(f"d:\\code\\art\\juliaring{datetime.now().strftime('%Y%m%d%H%M%S')}.gif",
                save_all=True, append_images=images[1:], optimize=False, duration=DURATION, loop=0)

if __name__ == "__main__":
    main()
